<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[weiji info]]></title>
  <subtitle><![CDATA[危机信息]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://biancheng.me/"/>
  <updated>2015-10-22T06:11:00.469Z</updated>
  <id>http://biancheng.me/</id>
  
  <author>
    <name><![CDATA[weiji info]]></name>
    <email><![CDATA[jmme@foxmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[AFNetworking 3.0 & AFNetworking 2.X]]></title>
    <link href="http://biancheng.me/2015/10/22/afnetworking-30-&-afnetworking-2x/"/>
    <id>http://biancheng.me/2015/10/22/afnetworking-30-&-afnetworking-2x/</id>
    <published>2015-10-22T05:44:09.000Z</published>
    <updated>2015-10-22T06:10:49.000Z</updated>
    <content type="html"><![CDATA[<p>AFNetworking是一款在OS X和iOS下都令人喜爱的网络库。为了迎合iOS新版本的升级, AFNetworking在3.0版本中删除了基于 NSURLConnection API的所有支持。如果你的项目以前使用过这些API，建议您立即升级到基于 NSURLSession 的API的AFNetworking的版本。本指南将引导您完成这个过程。</p>
<p>本指南是为了引导使用AFNetworking 2.x升级到最新的版本API，以达到过渡的目的，并且解释了新增和更改的设计结构。</p>
<a id="more"></a>

<h3 id="新设备要求:_iOS_7,_Mac_OS_X_10-9,_watchOS_2,_tvOS_9,_&amp;_Xcode_7">新设备要求: iOS 7, Mac OS X 10.9, watchOS 2, tvOS 9, &amp; Xcode 7</h3>
<p>AFNetworking 3.0正式支持的iOS 7， Mac OS X的10.9， watchOS 2 ， tvOS 9 和Xcode 7。如果你想使用AFNetworking在针对较旧版本的SDK项目，请检查README的兼容性信息。</p>
<h3 id="NSURLConnection的API已废弃">NSURLConnection的API已废弃</h3>
<p>AFNetworking 1.0建立在NSURLConnection的基础API之上 ，AFNetworking 2.0开始使用NSURLConnection的基础API ，以及较新基于NSURLSession的API的选项。 AFNetworking 3.0现已完全基于NSURLSession的API，这降低了维护的负担，同时支持苹果增强关于NSURLSession提供的任何额外功能。由于Xcode 7中，NSURLConnection的API已经正式被苹果弃用。虽然该API将继续运行，但将没有新功能将被添加，并且苹果已经通知所有基于网络的功能，以充分使NSURLSession向前发展。</p>
<p>AFNetworking 2.X将继续获得关键的隐患和安全补丁，但没有新的功能将被添加。Alamofire(Swift下的网络请求)软件基金会建议，所有的项目迁移到基于NSURLSession的API。</p>
<h3 id="弃用的类">弃用的类</h3>
<p>下面的类已从AFNetworking 3.0中废弃：</p>
<ul>
<li>AFURLConnectionOperation</li>
<li>AFHTTPRequestOperation</li>
<li>AFHTTPRequestOperationManager</li>
</ul>
<h3 id="修改的类">修改的类</h3>
<p>下面的类包含基于NSURLConnection的API的内部实现。他们已经被使用NSURLSession重构:</p>
<ul>
<li>UIImageView+AFNetworking</li>
<li>UIWebView+AFNetworking</li>
<li>UIButton+AFNetworking</li>
</ul>
<p>迁移</p>
<p>AFHTTPRequestOperationManager 核心代码</p>
<p>如果你以前使用 AFHTTPRequestOperationManager ， 你将需要迁移去使用 AFHTTPSessionManager。 以下的类在两者过渡间并没有变化：</p>
<ul>
<li>securityPolicy</li>
<li>requestSerializer</li>
<li>responseSerializer</li>
</ul>
<p>接下来举一个关于AFHTTPSessionManager的简单例子。注意HTTP网络请求返回的不再是AFHTTPRequestOperation, 修改成为了NSURLSessionTask，并且成功和失败的Block块中的参数也变更为了NSURLSessionTask，而不再是AFHTTPRequestOperation。</p>
<p>AFNetworking 2.x</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];
[manager GET:@<span class="string">"请求的url"</span> parameters:<span class="literal">nil</span> success:^(AFHTTPRequestOperation *operation, <span class="keyword">id</span> responseObject) {
<span class="built_in">NSLog</span>(@<span class="string">"成功"</span>);
} failure:^(AFHTTPRequestOperation *operation, <span class="built_in">NSError</span>*error) {
<span class="built_in">NSLog</span>(@<span class="string">"失败"</span>);
}];
</pre></td></tr></table></figure>


<p>AFNetworking 3.0</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>AFHTTPSessionManager *session = [AFHTTPSessionManager manager];
[session GET:@<span class="string">"请求的url"</span> parameters:<span class="literal">nil</span> success:^(NSURLSessionDataTask *task, <span class="keyword">id</span> responseObject) {
<span class="built_in">NSLog</span>(@<span class="string">"成功"</span>);
} failure:^(NSURLSessionDataTask *task, <span class="built_in">NSError</span> *error) {
<span class="built_in">NSLog</span>(@<span class="string">"失败"</span>);        
}];
</pre></td></tr></table></figure>


<h3 id="AFHTTPRequestOperation_核心代码">AFHTTPRequestOperation 核心代码</h3>
<p>与NSURLConnection对象不同，每个共享应用范围的设置如会话管理、缓存策略、Cookie存储以及URL协议等，这些NSURLSession对象都可以单独进行配置。使用特定的配置来初始化会话，它可以发送任务来获取数据，并上传或下载文件。</p>
<p>在AFNetworking 2.0中，使用AFHTTPRequestOperation，有可能创建一个没有额外开销的独立的网络请求来获取数据。NSURLSession则需要更多的开销，为了获得所要请求的数据。</p>
<p>接下来，将要通过AFHTTPSessionManager创建一个单例，并创建一个任务和启动它。</p>
<p>AFNetworking 2.x</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="built_in">NSURL</span> *URL = [<span class="built_in">NSURL</span> URLWithString:@<span class="string">""</span>];
<span class="built_in">NSURLRequest</span> *request = [<span class="built_in">NSURLRequest</span> requestWithURL:URL];
AFHTTPRequestOperation *op = [[AFHTTPRequestOperation alloc] initWithRequest:request];
op<span class="variable">.responseSerializer</span> = [AFJSONResponseSerializer serializer];
[op setCompletionBlockWithSuccess:^(AFHTTPRequestOperation *operation, <span class="keyword">id</span> responseObject) {
<span class="built_in">NSLog</span>(@<span class="string">"JSON: %@"</span>, responseObject);
} failure:^(AFHTTPRequestOperation *operation, <span class="built_in">NSError</span> *error) {
<span class="built_in">NSLog</span>(@<span class="string">"Error: %@"</span>, error);
}];
[[NSOperationQueue mainQueue] addOperation:op];
</pre></td></tr></table></figure>


<p>AFNetworking 3.0</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="built_in">NSURL</span> *URL = [<span class="built_in">NSURL</span> URLWithString:@<span class="string">""</span>];
AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
[manager GET:URL<span class="variable">.absoluteString</span> parameters:<span class="literal">nil</span> success:^(NSURLSessionTask *task, <span class="keyword">id</span> responseObject) {
<span class="built_in">NSLog</span>(@<span class="string">"JSON: %@"</span>, responseObject);
} failure:^(NSURLSessionTask *operation, <span class="built_in">NSError</span> *error) {
<span class="built_in">NSLog</span>(@<span class="string">"Error: %@"</span>, error);
}];
</pre></td></tr></table></figure>


<h3 id="UIKit的迁移">UIKit的迁移</h3>
<p>图片下载已经被重构，以遵循AlamofireImage架构与新的AFImageDownloader类。这个类的图片下载职责的代���人是UIButton与UIImageView的类目，并且提供了一些方法，在必要时可以自定义。类别中，下载远程图片的实际方法没有改变。</p>
<p>UIWebView的类目被重构为使用AFHTTPSessionManager作为其网络请求。</p>
<h3 id="UIAlertView的类目被废弃">UIAlertView的类目被废弃</h3>
<p>从AFNetworking 3.0后UIAlertView的类目因过时而被废弃。并没有提供UIAlertController类目的计划，因为这是应用程序应处理的逻辑，而不是这个库。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>AFNetworking是一款在OS X和iOS下都令人喜爱的网络库。为了迎合iOS新版本的升级, AFNetworking在3.0版本中删除了基于 NSURLConnection API的所有支持。如果你的项目以前使用过这些API，建议您立即升级到基于 NSURLSession 的API的AFNetworking的版本。本指南将引导您完成这个过程。</p>
<p>本指南是为了引导使用AFNetworking 2.x升级到最新的版本API，以达到过渡的目的，并且解释了新增和更改的设计结构。</p>
]]>
    
    </summary>
    
      <category term="第三方库" scheme="http://biancheng.me/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
      <category term="iOS" scheme="http://biancheng.me/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[随和的人更幸福]]></title>
    <link href="http://biancheng.me/2014/11/21/%E9%9A%8F%E5%92%8C%E7%9A%84%E4%BA%BA%E6%9B%B4%E5%B9%B8%E7%A6%8F/"/>
    <id>http://biancheng.me/2014/11/21/随和的人更幸福/</id>
    <published>2014-11-21T15:36:50.000Z</published>
    <updated>2014-11-21T15:43:06.000Z</updated>
    <content type="html"><![CDATA[<p>随和的人更幸福。</p>
<p>随和是什么？有人说，随和就是不计较，不争斗，遇事而安，和和气气的态度，随和体现在友善的气质。笔者试从四个方面来分析什么事随和：<br><a id="more"></a></p>
<p>（一）随和是一种素质<br>    当今社会，随和体现的是一种素质，这种素质需要学习与沉淀，随和的人以团队为中心，而不是以自我为中心，即便您毕业于名牌大学，即便您有漂亮的外表，即便您比别人聪明，都要学会团队精神，学会随和。笔者见过这样的朋友，在团队中，气势要压过别人，凡事都争个上风，斤斤计较自己的名誉、地位，什么都要比人家好，结果往往造成人际关系不和谐。<br>    生活中，工作中，做一个随和的人，笔者认为，随和是一种素质，随和的人，善于发现周围其他人的真善美，善于发现周围朋友的优点，善于享受生活赐予我们的快乐，随和的人，心胸宽广，视野宽阔，智慧无比。随和是一种素质，无论在生活中，还是工作中，做一个随和的人吧。</p>
<p>（二）随和是一种修养<br>    随着是一种修养，随和的人善于聆听，随和的人善于与不同性格特点的人进行沟通，随和的人常常换位思考，随和的人真诚地赞扬别人。随和是一种修养，这种修养是一种积累之后的沉淀，这种修养体现在举手投足之间的美丽。随和不是没有原则，而是善于从周围朋友的角度来看事物与问题，随和的人不是没有人云亦云，随和的人不是随波逐流，而是从善于从不同的看法与观点中找到共同点，与人为善，善待他人，多一份坦然，添一份好心情。随和是一种修养，随和的人是智慧的人，随和一些，享受生活。</p>
<p>（三）随和是一种文化<br>    在一个组织中，随和的团队氛围，会让每一个成员感到轻松，感到愉悦，随和的人更容易融入到团队中，即便您的能力不是最强，但随和的性格会让你在团队中很快进步与成长。随和是一种文化，这种文化不仅体现在组织文化中，更体现在文化给予每个成员的力量与进步。随和的文化促进组织每一位成员成长与进步，反过来促进组织的成长与进步。反之，如果没有随和的组织文化，每一个成员都以自我为中心，会影响到组织的凝聚力，会破坏组织的团结，反过来影响组织的进步与成长。随和是一种文化，这种文化需要组织每一个成员的随和。</p>
<p>（四）随和是一种心态<br>    俗话说，态度决定一切，心态就是性格加态度。性格是一个人独特而稳定的个性特征，它表现一个人对现实的心理认知和相应的习惯化的行为方式。态度是一个人对客观事物的心理反应。有人说，心态要有三种构成模式：骆驼的心态，狮子的心态，婴儿的心态。笔者认为，首先你要学会随和。随和的人更容易从其他人身上学习到长处与优点，随和的人在聆听周围的同时，也会得到周围的聆听。苏格拉底也有一句名言：“快乐就是这样，它往往在你为着一个明确的目标忙得无暇顾及其他的时候而不知不觉地来到。”同样，当你把目标锁定，“只问耕耘，莫论收获”的时候，上帝也就把收获悄悄地给你预备好了。<br>    随和是一种素质，一种修养，一种文化，一种心态，随和的人更幸福。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>随和的人更幸福。</p>
<p>随和是什么？有人说，随和就是不计较，不争斗，遇事而安，和和气气的态度，随和体现在友善的气质。笔者试从四个方面来分析什么事随和：<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Uikit Dynamics入门]]></title>
    <link href="http://biancheng.me/2014/10/19/dynamics%E5%85%A5%E9%97%A8/"/>
    <id>http://biancheng.me/2014/10/19/dynamics入门/</id>
    <published>2014-10-19T15:36:35.000Z</published>
    <updated>2014-11-12T02:37:30.000Z</updated>
    <content type="html"><![CDATA[<h3 id="什么是UIKit动力学（UIKit_Dynamics）">什么是UIKit动力学（UIKit Dynamics）</h3>
<p>其实就是UIKit的一套动画和交互体系。我们现在进行UI动画基本都是使用CoreAnimation或者UIView animations。而UIKit动力学最大的特点是将现实世界动力驱动的动画引入了UIKit，比如重力，铰链连接，碰撞，悬挂等效果。一言蔽之，即是，将2D物理引擎引入了人UIKit。需要注意，UIKit动力学的引入，并不是以替代CA或者UIView动画为目的的，在绝大多数情况下CA或者UIView动画仍然是最优方案，只有在需要引入逼真的交互设计的时候，才需要使用UIKit动力学它是作为现有交互设计和实现的一种补充而存在的。<br>目的当然是更加自然和炫目的UI动画效果，比如模拟现实的拖拽和弹性效果，放在以前如果单用iOS SDK的动画实现起来还是相当困难的，而在UIKit Dynamics的帮助下，复杂的动画效果可能也只需要很短的代码（基本100行以内…其实现在用UIView animation想实现一个不太复杂的动画所要的代码行数都不止这个数了吧）。总之，便利多多，配合UI交互设计，以前很多不敢想和不敢写（至少不敢自己写）的效果实现起来会非常方便，也相信在iOS7的时代各色使用UIKit动力学的应用的在动画效果肯定会上升一个档次。<br>那么，应该怎么做呢<br><a id="more"></a><br>UIKit动力学实现的结构<br>为了实现动力UI，需要注册一套UI行为的体系，之后UI便会按照预先的设定进行运动了。我们应该了解的新的基本概念有如下四个：<br>UIDynamicItem：用来描述一个力学物体的状态，其实就是实现了UIDynamicItem委托的对象，或者抽象为有面积有旋转的质点；<br>UIDynamicBehavior：动力行为的描述，用来指定UIDynamicItem应该如何运动，即定义适用的物理规则。一般我们使用这个类的子类对象来对一组UIDynamicItem应该遵守的行为规则进行描述；<br>UIDynamicAnimator；动画的播放者，动力行为（UIDynamicBehavior）的容器，添加到容器内的行为将发挥作用；<br>ReferenceView：等同于力学参考系，如果你的初中物理不是语文老师教的话，我想你知道这是啥..只有当想要添加力学的UIView是ReferenceView的子view时，动力UI才发生作用。<br>光说不练假把式，来做点简单的demo吧。比如为一个view添加重力行为：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre>- (<span class="keyword">void</span>)viewDidLoad
{
    	[<span class="keyword">super</span> viewDidLoad];

    <span class="built_in">UIView</span> *aView = [[<span class="built_in">UIView</span> alloc] initWithFrame:CGRectMake(<span class="number">100</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">100</span>)];
    aView<span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> lightGrayColor];
    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:aView];

    UIDynamicAnimator* animator = [[UIDynamicAnimator alloc] initWithReferenceView:<span class="keyword">self</span><span class="variable">.view</span>];
    UIGravityBehavior* gravityBeahvior = [[UIGravityBehavior alloc] initWithItems:@[aView]];
    [animator addBehavior:gravityBeahvior];
    <span class="keyword">self</span><span class="variable">.animator</span> = animator;
}
</pre></td></tr></table></figure>


<p>代码很简单，<br>以现在ViewController的view为参照系（ReferenceView），来初始化一个UIDynamicAnimator。<br>然后分配并初始化一个动力行为，这里是UIGravityBehavior，将需要进行物理模拟的UIDynamicItem传入。UIGravityBehavior的initWithItems:接受的参数为包含id的数组，另外UIGravityBehavior实例还有一个addItem:方法接受单个的id。就是说，实现了UIDynamicItem委托的对象，都可以看作是被力学特性影响的，进而参与到计算中。UIDynamicItem委托需要我们实现bounds，center和transform三个属性，在UIKit Dynamics计算新的位置时，需要向Behavior内的item询问这些参数，以进行正确计算。iOS7中，UIView和UICollectionViewLayoutAttributes已经默认实现了这个接口，所以这里我们直接把需要模拟重力的UIView添加到UIGravityBehavior里就行了。<br>把配置好的UIGravityBehavior添加到animator中。<br>strong持有一下animator，避免当前scope结束被ARC释放掉（后果当然就是UIView在哪儿傻站着不掉）<br>运行结果，view开始受重力影响了：<br>重力作用下的UIview<br>重力作用下的UIview<br>碰撞，我要碰撞<br>没有碰撞的话，物理引擎就没有任何意义了。和重力行为类似，碰撞也有一个UIDynamicBehavior子类来描述碰撞行为，即UICollisionBehavior。在上面的demo中加上几句：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre>- (<span class="keyword">void</span>)viewDidLoad
{
    	[<span class="keyword">super</span> viewDidLoad];

    <span class="built_in">UIView</span> *aView = [[<span class="built_in">UIView</span> alloc] initWithFrame:CGRectMake(<span class="number">100</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">100</span>)];
    aView<span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> lightGrayColor];
    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:aView];

    UIDynamicAnimator* animator = [[UIDynamicAnimator alloc] initWithReferenceView:<span class="keyword">self</span><span class="variable">.view</span>];
    UIGravityBehavior* gravityBeahvior = [[UIGravityBehavior alloc] initWithItems:@[aView]];
    [animator addBehavior:gravityBeahvior];

    UICollisionBehavior* collisionBehavior = [[UICollisionBehavior alloc] initWithItems:@[aView]];
    collisionBehavior<span class="variable">.translatesReferenceBoundsIntoBoundary</span> = <span class="literal">YES</span>;
    [animator addBehavior:collisionBehavior];
    collisionBehavior<span class="variable">.collisionDelegate</span> = <span class="keyword">self</span>;

    <span class="keyword">self</span><span class="variable">.animator</span> = animator;
}
</pre></td></tr></table></figure>


<p>也许聪明的你已经看到了，还是一样的，创建新的行为规则（UICollisionBehavior），然后加到animator中…唯一区别的地方是碰撞需要设定碰撞边界范围translatesReferenceBoundsIntoBoundary将整个参照view（也就是self.view）的边框作为碰撞边界（另外你还可以使用setTranslatesReferenceBoundsIntoBoundaryWithInsets:这样的方法来设定某一个区域作为碰撞边界，更复杂的边界可以使用addBoundaryWithIdentifier:forPath:来添加UIBezierPath，或者addBoundaryWithIdentifier:fromPoint:toPoint:来添加一条线段为边界，详细地还请查阅文档）；另外碰撞是有回调的，可以在self中实现UICollisionBehaviorDelegate。<br>最后，只是直直地掉下来的话未免太无聊了，加个角度吧：<br>1<br>aView.transform = CGAffineTransformRotate(aView.transform, 45);<br>结果是这样的，帅死了…这在以前只用iOS SDK的话，够写上很长时间了吧..<br>碰撞和重力同时作用的动力UI<br>碰撞和重力同时作用的动力UI<br>碰撞的delegate可以帮助我们了解碰撞的具体情况，包括哪个item和哪个item开始发生碰撞，碰撞接触点是什么，是否和边界碰撞，和哪个边界碰撞了等信息。这些回调方法保持了Apple一向的命名原则，所以通俗易懂。需要多说一句的是回调方法中对于ReferenceView的Bounds做边界的情况，BoundaryIdentifier将会是nil，自行添加的其他边界的话，ID自然是添加时指定的ID了。<br>– collisionBehavior:beganContactForItem:withBoundaryIdentifier:atPoint:<br>– collisionBehavior:beganContactForItem:withItem:atPoint:<br>– collisionBehavior:endedContactForItem:withBoundaryIdentifier:<br>– collisionBehavior:endedContactForItem:withItem:<br>其他能实现的效果<br>除了重力和碰撞，iOS SDK还预先帮我们实现了一些其他的有用的物理行为，它们包括<br>UIAttachmentBehavior 描述一个view和一个锚相连接的情况，也可以描述view和view之间的连接。attachment描述的是两个点之间的连接情况，可以通过设置来模拟无形变或者弹性形变的情况（再次希望你还记得这些概念，简单说就是木棒连接和弹簧连接两个物体）。当然，在多个物体间设定多个；UIAttachmentBehavior，就可以模拟多物体连接了..有了这些，似乎可以做个老鹰捉小鸡的游戏了- -…<br>UISnapBehavior 将UIView通过动画吸附到某个点上。初始化的时候设定一下UISnapBehavior的initWithItem:snapToPoint:就行，因为API非常简单，视觉效果也很棒，估计它是今后非游戏app里会被最常用的效果之一了；<br>UIPushBehavior 可以为一个UIView施加一个力的作用，这个力可以是持续的，也可以只是一个冲量。当然我们可以指定力的大小，方向和作用点等等信息。<br>UIDynamicItemBehavior 其实是一个辅助的行为，用来在item层级设定一些参数，比如item的摩擦，阻力，角阻力，弹性密度和可允许的旋转等等<br>UIDynamicItemBehavior有一组系统定义的默认值，<br>allowsRotation YES<br>density 1.0<br>elasticity 0.0<br>friction 0.0<br>resistance 0.0<br>所有的UIDynamicBehavior都是可以独立作用的，同时作用时也遵守力的合成。也就是说，组合使用行为可以达到一些较复杂的效果。举个例子，希望模拟一个drag物体然后drop后下落的过程，可以用如下代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="code"><pre>- (<span class="keyword">void</span>)viewDidLoad
{
    	[<span class="keyword">super</span> viewDidLoad];

    UIDynamicAnimator* animator = [[UIDynamicAnimator alloc] initWithReferenceView:<span class="keyword">self</span><span class="variable">.view</span>];
    UICollisionBehavior* collisionBehavior = [[UICollisionBehavior alloc] initWithItems:@[<span class="keyword">self</span><span class="variable">.square1</span>]];

    collisionBehavior<span class="variable">.translatesReferenceBoundsIntoBoundary</span> = <span class="literal">YES</span>;
    [animator addBehavior:collisionBehavior];

    UIGravityBehavior *g = [[UIGravityBehavior alloc] initWithItems:@[<span class="keyword">self</span><span class="variable">.square1</span>]];
    [animator addBehavior:g];

    <span class="keyword">self</span><span class="variable">.animator</span> = animator;
}


-(<span class="keyword">IBAction</span>)handleAttachmentGesture:(UIPanGestureRecognizer*)gesture
{
    <span class="keyword">if</span> (gesture<span class="variable">.state</span> == UIGestureRecognizerStateBegan){

        <span class="built_in">CGPoint</span> squareCenterPoint = CGPointMake(<span class="keyword">self</span><span class="variable">.square1</span><span class="variable">.center</span><span class="variable">.x</span>, <span class="keyword">self</span><span class="variable">.square1</span><span class="variable">.center</span><span class="variable">.y</span> - <span class="number">100.0</span>);

        UIAttachmentBehavior* attachmentBehavior = [[UIAttachmentBehavior alloc] initWithItem:<span class="keyword">self</span><span class="variable">.square1</span> attachedToAnchor:squareCenterPoint];

        <span class="keyword">self</span><span class="variable">.attachmentBehavior</span> = attachmentBehavior;
        [<span class="keyword">self</span><span class="variable">.animator</span> addBehavior:attachmentBehavior];

    } <span class="keyword">else</span> <span class="keyword">if</span> ( gesture<span class="variable">.state</span> == UIGestureRecognizerStateChanged) {

        [<span class="keyword">self</span><span class="variable">.attachmentBehavior</span> setAnchorPoint:[gesture locationInView:<span class="keyword">self</span><span class="variable">.view</span>]];

    } <span class="keyword">else</span> <span class="keyword">if</span> (gesture<span class="variable">.state</span> == UIGestureRecognizerStateEnded) {
        [<span class="keyword">self</span><span class="variable">.animator</span> removeBehavior:<span class="keyword">self</span><span class="variable">.attachmentBehavior</span>];
    }
}
</pre></td></tr></table></figure>


<p>viewDidiLoad时先在现在环境中加入了重力，然后监测到pan时附加一个UIAttachmentBehavior，并在pan位置更新更新其锚点，此时UIAttachmentBehavior和UIGravityBehavior将同时作用（想象成一根木棒连着手指处和view）。在手势结束时将这个UIAttachmentBehavior移除，view将在重力作用下下落。整个过程如下图：<br>Drag &amp; Drop<br>Drag &amp; Drop<br>UIKit力学的物理学分析<br>既然是力学，那显然各种单位是很重要的。在现实世界中，理想情况下物体的运动符合牛顿第二运动定理，在国际单位制中，力的单位是牛顿（N），距离单位是米（m），时间单位是秒（s），质量单位是千克（kg）。根据地球妈妈的心情，我们生活在这样一套体制中：重力加速度约为9.8m/s2 ，加速度的单位是m/s2 ，速度单位是m/s，牛顿其实是kg·m/s2 ，即1牛顿是让质量为1千克的物体产生1米每二次方秒的加速度所需要的力。<br>以上是帮助您回忆初中知识，而现在这一套体系在UIKit里又怎么样呢？这其实是每一个物理引擎都要讨论和明白的事情，UIKit的单位体制里由于m这个东西太过夸张，因此用等量化的点（point，之后简写为p）来代替。具体是这样的：UI重力加速度定义为1000p/s2 ，这样的定义有两方面的考虑，一时为了简化，好记，确实1000比9.8来的只观好看，二是也算符合人们的直感：一个UIView从y=0开始自由落体落到屏幕底部所需的时间，在3.5寸屏幕上为0.98秒，4寸屏幕上为1.07秒，1秒左右的自由落体的视觉效果对人眼来说是很舒服能进行判断的。<br>那么UIView的质量又如何定义呢，这也是很重要的，并涉及到力作用和加速度下UIView的表现。苹果又给出了自己的“UIKit牛顿第二定律”，定义了1单位作用力相当于将一个100px100p的默认密度的UIView以100p/s2 的加速度移动。这里需要注意默认密度这个假设，因为在UIDynamicItem的委托中并没有实现任何密度相关的定义，而是通过UIDynamicItemBehavior来附加指定的。默认情况下，密度值为1，这就相当于质量是10000单位的UIView在1单位的作用力下可以达到1/10的UI重力加速度。<br>这样类比之后的结论是，如果将1单位的UI力学中的力等同于1牛顿的话：<br>1000单位的UI质量，与现实世界中1kg的质量相当，即一个点等同一克；<br>屏幕的100像素的长度，约和现实世界中0.99米相当（完全可以看为1米）<br>UI力学中的默认密度，约和现实世界的0.1kg/m2 相当<br>可以说UIKit为我们构建了一套适应iOS屏幕的相当优雅的力学系统，不仅让人过目不忘，在实际的物理情景和用户体验中也近乎完美。在开发中，我们可以参照这些关系寻找现实中的例子，然后将其带入UIKit的力学系统中，以得到良好的模拟效果。<br>UIKit动力学自定义<br>除了SDK预先定义好的行为以外，我们还可以自己定义想要的行为。这种定义可以发生在两个层级上，一种是将官方的行为打包，以简化实现。另一种是完全定义新的计算规则。<br>对于第一种，其实考虑一下上面的重力+边界碰撞，或者drag &amp; drop行为，其实都是两个甚至多个行为的叠加。要是每次都这样设定一次的话，不是很辛苦么，还容易遗忘出错。于是一种好的方式是将它们打包封装一下。具体地，如下步骤：<br>继承一下UIDynamicBehavior（在这里UIDynamicBehavior类似一个抽象类，并没有具体实现什么行为）<br>在子类中实现一个类似其他内置行为初始化方法initWithItems:，用以添加物体和想要打包的规则。当然你如果喜欢用其他方式也行..只不过和自带的行为保持API统一对大家都有好处..添加item的话就用默认规则的initWithItems:就行，对于规则UIDynamicBehavior提供了一个addChildBehavior:的方法，来将其他规则加入到当前规则里<br>没有第三步了，使用就行了。<br>一个例子，打包了碰撞和重力两种行为，定义之后使用时就只需要写一次了。当然这只是最简单的例子和运用，当行为复杂以后，这样的使用方法是不可避免的，否则管理起来会让人有想死的心。另外，将手势等交互的方式也集成之中，进一步封装调用细节会是不错的实践。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="comment">//GravityWithCollisionBehavior.h</span>
<span class="class"><span class="keyword">@interface</span> <span class="title">GravityWithCollisionBehavior</span> : <span class="title">UIDynamicBehavior</span></span>

-(instancetype) initWithItems:(<span class="built_in">NSArray</span> *)items;

<span class="keyword">@end</span>


<span class="comment">//GravityWithCollisionBehavior.m</span>
<span class="class"><span class="keyword">@implementation</span> <span class="title">GravityWithCollisionBehavior</span></span>

-(instancetype) initWithItems:(<span class="built_in">NSArray</span> *)items
{
    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) {
        UIGravityBehavior *gb = [[UIGravityBehavior alloc] initWithItems:items];
        UICollisionBehavior *cb = [[UICollisionBehavior alloc] initWithItems:items];
        cb<span class="variable">.translatesReferenceBoundsIntoBoundary</span> = <span class="literal">YES</span>;
        [<span class="keyword">self</span> addChildBehavior:gb];
        [<span class="keyword">self</span> addChildBehavior:cb];
    }
    <span class="keyword">return</span> <span class="keyword">self</span>;
}
</pre></td></tr></table></figure>


<p>@end<br>另一种比较高级一点，需要对计算完全定义。在默认的行为或者它们组合不能满足禽兽般的产品经理/设计师的需求是，亲爱的骚年..开始自己写吧..其实说简单也简单，UIDynamicBehavior里提供了一个@property(nonatomic, copy) void (^action)(void)，animator将在每次animation step（就是需要计算动画时）调用这个block。就是说，你可以通过设定这个block来实现自己的行为。基本思路就是在这个block中向所有item询问它们当前的center和transform状态，然后开始计算，然后把计算后的相应值再赋予item，从而改变在屏幕上的位置，大小，角度等。<br>UIKit动力学的性能分析和限制<br>使用物理引擎不是没有代价的的，特别是在碰撞检测这块，是要耗费一定CPU资源的。但是以测试的情况来看，如果只是UI层面上的碰撞检测还是没有什么问题的，我自己实测iPhone4上同时进行数十个碰撞计算完全没有掉帧的情况。因此如果只是把其用在UI特效上，应该不用太在意资源的耗费。但是如果同时有成百上千的碰撞需要处理的情况，可能会出现卡顿吧。<br>对于UIDynamicItem来说，当它们被添加到动画系统后，我们只能通过动画系统来改变位置，而外部的对于UIDynamicItem的center,transform等设定是被忽略的（其实这也是大多数2D引擎的实现策略，算不上限制）。<br>主要的限制是在当计算迭代无法得到有效解的时候，动画将无法正确呈现。这对于绝大多数物理引擎都是一样的。迭代不能收敛时整个物理系统处于不确定的状态，比如初始时就设定了碰撞物体位于边界内部，或者在狭小空间内放入了过多的非弹性碰撞物体等。另外，这个引擎仅仅只是用来呈现UI效果，它并没有保证物理上的精确度，因此如果要用它来做UI以外的事情，有可能是无法得到很好的结果的。<br>总结<br>总之就是一套全新的UI交互的视觉体验和效果，但是并非处处适用。在合适的地方使用可以增加体验，但是也会有其他方式更适合的情况。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="什么是UIKit动力学（UIKit_Dynamics）">什么是UIKit动力学（UIKit Dynamics）</h3>
<p>其实就是UIKit的一套动画和交互体系。我们现在进行UI动画基本都是使用CoreAnimation或者UIView animations。而UIKit动力学最大的特点是将现实世界动力驱动的动画引入了UIKit，比如重力，铰链连接，碰撞，悬挂等效果。一言蔽之，即是，将2D物理引擎引入了人UIKit。需要注意，UIKit动力学的引入，并不是以替代CA或者UIView动画为目的的，在绝大多数情况下CA或者UIView动画仍然是最优方案，只有在需要引入逼真的交互设计的时候，才需要使用UIKit动力学它是作为现有交互设计和实现的一种补充而存在的。<br>目的当然是更加自然和炫目的UI动画效果，比如模拟现实的拖拽和弹性效果，放在以前如果单用iOS SDK的动画实现起来还是相当困难的，而在UIKit Dynamics的帮助下，复杂的动画效果可能也只需要很短的代码（基本100行以内…其实现在用UIView animation想实现一个不太复杂的动画所要的代码行数都不止这个数了吧）。总之，便利多多，配合UI交互设计，以前很多不敢想和不敢写（至少不敢自己写）的效果实现起来会非常方便，也相信在iOS7的时代各色使用UIKit动力学的应用的在动画效果肯定会上升一个档次。<br>那么，应该怎么做呢<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[让别人理解]]></title>
    <link href="http://biancheng.me/2014/09/18/%E8%AE%A9%E5%88%AB%E4%BA%BA%E7%90%86%E8%A7%A3/"/>
    <id>http://biancheng.me/2014/09/18/让别人理解/</id>
    <published>2014-09-18T03:20:28.000Z</published>
    <updated>2015-01-31T04:02:33.000Z</updated>
    <content type="html"><![CDATA[<p>理解分为两类，将需要理解的事物归到已经理解的，此为上策；不然，那就只能强制理解，习惯的力量是无穷的，如果习惯了，那他就应该是那样，不需要理解了。</p>
<p><img src="123.png" alt="Mou icon"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>理解分为两类，将需要理解的事物归到已经理解的，此为上策；不然，那就只能强制理解，习惯的力量是无穷的，如果习惯了，那他就应该是那样，不需要理解了。</p>
<p><img src="123.png" alt="Mou icon"></p>
]]>
    </summary>
    
  </entry>
  
</feed>
